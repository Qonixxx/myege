s = open("24.txt").readline()
while "+*" in s: s = s.replace("+*", "+ *")
while "++" in s: s = s.replace("++", "+ +")
while "*+" in s: s = s.replace("*+", "* +")
while "**" in s: s = s.replace("**", "* *")

m = -float('inf')
for c in s.split(' '):
    if len(c) > m:
        for i in range(len(c) - 1):
            pd_str = c[i]
            if pd_str[0] not in '+*' \
               and c[i] + c[i + 1] not in ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']:
                for j in range(i + 1, len(c)):
                    pd_str += c[j]
                    if pd_str[-1] not in '+*':
                        if eval(pd_str) == 100:
                            m = max(m, len(pd_str))
print(m)


s = open("24.txt").readline()

# по тексту задания: "никакие два знака арифм. операций не стоят рядом с друг другом"
# по этой причине перебираем в цикле все комбинации "+" и "*", пока их всех не станет в строке
while "+*" in s: s = s.replace("+*", "+ *")
while "++" in s: s = s.replace("++", "+ +")
while "*+" in s: s = s.replace("*+", "* +")
while "**" in s: s = s.replace("**", "* *")

m = -float('inf') # для поиска максимума берем самое малое число

for c in s.split(' '): # после замен строка может выглядеть так '12*45+12* 999+888*100 123' и т.д
# перебираем каждый отдельный кусок в строке, разделяя строку по пробелам

    if len(c) > m: # представим, мы нашли подходящую макс.строку с длиной 31, например
    # тогда, если в куске символов меньше максимума, то брать ее бессмысленно

    # следующие два цикла напоминают перебор пар в 17-м задании
    # но только тут проверяются не только два соседних
    # но и первый с третьим, первый с четвертым и т.д
    
        for i in range(len(c) - 1): 
            pd_str = c[i] # берем первый символ

            # строка (не начинается*) со знака и с нуля + числа
            if pd_str[0] not in '+*' \
               and c[i] + c[i + 1] not in ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']:
                
                for j in range(i + 1, len(c)):
                    pd_str += c[j] # формируем строку дальше
                    if pd_str[-1] not in '+*': # если она не закончилась на знаке (если последний элемент не является знаком)
                        if eval(pd_str) == 100: # eval(str) позволяет посчитать значение арифм. выражения в строке
                            m = max(m, len(pd_str))
print(m)
